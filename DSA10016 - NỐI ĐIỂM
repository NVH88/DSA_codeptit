#include<bits/stdc++.h>
using namespace std;

struct edge {
	int x, y;
	double w;
};

int n, par[105], sz[105];
vector<edge> e;

bool cmp(edge a, edge b) {
	return a.w < b.w;
}

int find(int u) {
	if(u == par[u]) return u;
	return find(par[u]);
}

bool uni(int u, int v) {
	u = find(u); v = find(v);
	if(u == v) return false;
	if(sz[u] < sz[v]) swap(u, v);
	par[v] = u;
	sz[u] += sz[v];
	return true;
}

int main() {
	int t; cin >> t;
	while(t--) {
		e.clear();
		cin >> n;
		for(int i = 0; i < n; ++i) par[i] = i, sz[i] = 1;
		pair<double, double> p[n];
		for(int i = 0; i < n; ++i) {
			cin >> p[i].first >> p[i].second;
		}
		for(int i = 0; i < n - 1; ++i) {
			for(int j = i + 1; j < n; ++j) {
				double d = sqrt((p[i].first - p[j].first) * (p[i].first - p[j].first) + (p[i].second - p[j].second) * (p[i].second - p[j].second));
				e.push_back((edge){i, j, d});
			}
		}
		sort(e.begin(), e.end(), cmp);
		int cnt = 0; double cost = 0;
		for(edge i : e) {
			if(cnt == n) break;
			if(uni(i.x, i.y)) {
				++cnt;
				cost += i.w;
			}
		}
		cout << fixed << setprecision(6) << cost << endl;
	}
}
